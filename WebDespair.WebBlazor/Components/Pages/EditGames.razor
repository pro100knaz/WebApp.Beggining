@page "/editgame"
@page "/editgame/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient
@using WebDespair.WebBlazor.Clients
@using WebDespair.WebBlazor.Models

<PageTitle>@_Title</PageTitle>

<h3>@_Title</h3>

@if (_Genres is null || Game is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">

			<EditForm Model="@Game" FormName="editGame" OnValidSubmit="HandleSubmitAsync">
				<DataAnnotationsValidator />
				<ValidationSummary />
				<div class="mb-3">
					<label for="name" class="form-label">Name:</label>
					<InputText id="name" @bind-Value="Game.Name" class="form-control" />
					<ValidationMessage For="()=> Game.Name" />
				</div>

				<div class="mb-3">
					<label for="genre" class="form-label">Genre:</label>
					<InputSelect id="genre" @bind-Value="Game.GenreId" class="form-select">
						<option value=""> Select a genre </option>

						@foreach (var genre in _Genres)
						{
							<option value="@genre.Id">@genre.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="()=> Game.GenreId" />
				</div>

				<div class="mb-3">
					<label for="price" class="form-label">Price:</label>
					<InputNumber id="price" @bind-Value="Game.Price" class="form-control" />
					<ValidationMessage For="()=> Game.Price" />
				</div>

				<div class="mb-3">
					<label for="releaseDate" class="form-label">Release Date:</label>
					<InputDate id="releaseDate" @bind-Value="Game.ReleaseDate" class="form-control" />
					<ValidationMessage For="()=> Game.ReleaseDate" />
				</div>

				<button type="submit" class="btn btn-primary">Save</button>
				<a role="button" class="btn btn-secondary" href="/">Cancel</a>
			</EditForm>
		</div>
	</div>
}

@code {


	[Parameter]
	public int? Id { get; set; }

	[SupplyParameterFromForm]
	private GameDetails? Game { get; set; }

	private string _Title = string.Empty;

	private Genre[]? _Genres;

	protected override async Task OnParametersSetAsync()
	{
		if (Game is not null)
		{
			return;
		}

		if (Id is not null)
		{
			Game = await GamesClient.GetGameAsync(Id.Value);
			_Title = $"Edit  {Game.Name}";
		}
		else
		{
			Game = new()
				{
					Name = string.Empty,
					ReleaseDate = DateOnly.FromDateTime(DateTime.Now)
				};
			_Title = "New Game Creating";
		}
	}


	protected override async Task OnInitializedAsync()
	{
		_Genres = await GenresClient.GetGenreAsync();
	}

	private async Task HandleSubmitAsync()
	{

		ArgumentNullException.ThrowIfNull(Game);


		if (Id is null)
		{
			await GamesClient.AddGameAsync(Game);

		}
		else
		{
			Game.Id = Id.Value;
			await GamesClient.UpdateGameAsync(Game);
		}

		NavigationManager.NavigateTo("");
		//единственный выход просто запустить cmd dotnet watch, не через studio
	}


}
